using System;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using CloudLib;
using CloudLib.Models;
using ConsoleTester.Options;
using CsvHelper;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using SlackLib;
using SlackLib.Messages;

namespace ConsoleTester
{
    /// <summary>
    /// This class knows what to do with parsed commands
    /// </summary>
    public class CommandHandler
    {
        private readonly ILogger<CommandHandler> _logger;
        private readonly IStorage _storage;
        private readonly SlackClient _slackClient;

        public CommandHandler(ILogger<CommandHandler> logger, IStorage storage, SlackClient slackClient)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _storage = storage ?? throw new ArgumentNullException(nameof(storage));
            _slackClient = slackClient ?? throw new ArgumentNullException(nameof(slackClient));
        }

        public async Task HandleGetQuestionnaires(QuestionnairesOption option)
        {
            _logger.LogTrace("Getting all questionnaires");
            var result = await _storage.GetQuestionnaires();
            foreach (var questionnaire in result)
            {
                _logger.LogInformation("- {created} {channel} {questionnaireId} {question} {answers}", questionnaire.Created, questionnaire.Channel, questionnaire.QuestionnaireId, questionnaire.Question, questionnaire.AnswerOptions);
            }
        }

        public async Task HandleCreateQuestionnaires(CreateQuestionnaireOption option)
        {
            try
            {
                _logger.LogTrace("Creating questionnaire from file {file}", option.QuestionnaireFile);

                var json = await File.ReadAllTextAsync(option.QuestionnaireFile);
                var questionnaire = JsonConvert.DeserializeObject<Questionnaire>(json);
                _logger.LogDebug("Questionnaire deserialized, question {0}", questionnaire.Question);

                var questionnaireDto = new QuestionnaireEntity(questionnaire.QuestionId, option.Channel)
                {
                    QuestionnaireId = questionnaire.QuestionId,
                    Channel = option.Channel,
                    Created = DateTime.UtcNow,
                    Question = questionnaire.Question,
                    AnswerOptions = string.Join(';', questionnaire.AnswerOptions)
                };
                await _storage.InsertOrMerge(questionnaireDto);

                await _slackClient.PostQuestionnaire(option.Channel, questionnaire);
                _logger.LogInformation("Questionnaire created from file {0}.", option.QuestionnaireFile);
            }
            catch (SlackLibException exception)
            {
                _logger.LogDebug(exception, "SlackLibException encountered while trying to create questionnaire from file {file}", option.QuestionnaireFile);
                _logger.LogCritical("Unable to send message to Slack. See error response for details.");
            }
            catch (IOException exception)
            {
                _logger.LogDebug(exception, "IOException encountered while trying to create questionnaire from file {file}", option.QuestionnaireFile);
                _logger.LogCritical("Unable to read file {0}. Possible reasons: File doesn't exists, file name is in invalid format, required permissions ar missing.  Unable to create questionnaire. Aborting...", option.QuestionnaireFile);
            }
            catch (JsonReaderException exception)
            {
                _logger.LogDebug(exception, "JsonReaderException encountered while trying to create questionnaire from file {file}", option.QuestionnaireFile);
                _logger.LogCritical("Unable to parse questionnaire from file {file}. Please make sure that file contains correct JSON. To be sure that file can be parsed, use the template generated by this program. Unable to create questionnaire. Abortting...", option.QuestionnaireFile);
            }
        }

        public async Task HandleGetAnswers(AnswersOption option)
        {
            _logger.LogTrace("Getting {questionnaireId} answers", string.IsNullOrWhiteSpace(option.QuestionnaireId) ? "all" : option.QuestionnaireId);
            var result = await _storage.GetAnswers(option.QuestionnaireId);
            _logger.LogDebug("Found {count} answers", result.Count());
            foreach (var answer in result)
            {
                _logger.LogInformation("- {questionnaireId} {answer} {time} {answerer}", answer.QuestionnaireId, answer.Answer, answer.Timestamp, answer.Answerer);
            }

            if (!string.IsNullOrWhiteSpace(option.OutputCsvFile))
            {
                using (var writer = new StreamWriter(option.OutputCsvFile))
                using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
                {
                    csv.WriteRecords(result);
                }
            }

            _logger.LogInformation("Answers retrieved.");
        }

        public async Task HandleDelete(DeleteOption option)
        {
            _logger.LogTrace("Deleting all questionnaires and answers");
            await _storage.DeleteAll();
            _logger.LogInformation("All items deleted.");
        }

        public async Task HandleGenerateTemplate(GenerateQuestionnaireTemplateOption option)
        {
            _logger.LogTrace("Generating a questionnaire template");

            var example = new Questionnaire
            {
                Question = "I said hey, what's going on?",
                AnswerOptions = new string[]
                {
                    "I try all the time",
                    "in this institution",
                    "hey yeah yeah",
                    ":partyparrot:"
                }
            };
            string json = JsonConvert.SerializeObject(example, Formatting.Indented);
            await File.WriteAllTextAsync(option.FileName, json);
            _logger.LogInformation("Questionnaire template file '{file}' created.", option.FileName);
        }
    }
}